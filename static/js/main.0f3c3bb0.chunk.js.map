{"version":3,"sources":["components/Icons/MovieSvg.svg","components/Icons/SearchIcon.svg","components/MovieCard/MovieCard.js","components/MovieInfo/MovieInfo.js","components/Navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","props","movie","Title","Year","Poster","imdbID","className","onClick","updatemovieSelect","window","scroll","top","left","behavior","src","alt","MovieInfo","useState","movieInfo","setMovieInfo","movieSelect","useEffect","axios","get","then","response","data","Type","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Language","Country","Awards","Navbar","search","updatesearch","timeoutId","updatetimeoutId","movieList","updatemovieList","fetchData","searchString","a","Search","console","log","MovieContainer","styled","div","MovieSvg","SearchIcon","placeholder","value","onChange","e","clearTimeout","target","timeout","setTimeout","type","length","map","index","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f3c3bb0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MovieSvg.db48b493.svg\";","export default __webpack_public_path__ + \"static/media/SearchIcon.cdf72d66.svg\";","import React from \"react\";\nimport \"./MovieCard.css\";\nconst MovieCard = (props) => {\n  const { Title, Year, Poster, imdbID } = props.movie;\n  return (\n    <>\n      <div\n        className=\"movieCard\"\n        onClick={() => {\n          props.updatemovieSelect(imdbID);\n          window.scroll({\n            top: 0,\n            left: 0,\n            behavior: \"smooth\",\n          });\n        }}\n      >\n        <img src={Poster} alt=\"\" />\n        <span>{Title} </span>\n        <div>\n          <span>type:Movie</span>\n          <span>year:{Year}</span>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MovieCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./MovieInfo.css\";\nimport axios from \"axios\";\nconst MovieInfo = (props) => {\n  const [movieInfo, setMovieInfo] = useState();\n  const { movieSelect } = props;\n  useEffect(() => {\n    axios\n      .get(`http://www.omdbapi.com/?i=${movieSelect}&apikey=a5487446`)\n      .then((response) => {\n        setMovieInfo(response.data);\n      });\n  }, [movieSelect]);\n  return (\n    <>\n      {movieInfo ? (\n        <>\n          <span\n            className=\"close\"\n            onClick={() => {\n              props.updatemovieSelect();\n            }}\n          >\n            X\n          </span>\n          <div className=\"movieInfo\">\n            {\" \"}\n            <img src={movieInfo?.Poster} alt=\"\" />\n            <div className=\"info\">\n              <span>\n                {movieInfo?.Type} : <span> {movieInfo?.Title}</span>\n              </span>\n              <span>\n                Year : <span> {movieInfo?.Year} </span>\n              </span>\n              <span>\n                Rated : <span> {movieInfo?.Rated} </span>\n              </span>\n              <span>\n                Released : <span> {movieInfo?.Released} </span>\n              </span>\n              <span>\n                Runtime : <span> {movieInfo?.Runtime} </span>\n              </span>\n              <span>\n                Genre : <span> {movieInfo?.Genre} </span>\n              </span>\n              <span>\n                Director : <span> {movieInfo?.Director} </span>\n              </span>\n              <span>\n                Writer : <span> {movieInfo?.Writer} </span>\n              </span>\n              <span>\n                Actors : <span> {movieInfo?.Actors} </span>\n              </span>\n              <span>\n                Plot : <span> {movieInfo?.Plot} </span>\n              </span>\n              <span>\n                Language : <span> {movieInfo?.Language} </span>\n              </span>\n              <span>\n                Country : <span> {movieInfo?.Country} </span>\n              </span>\n              <span>\n                Awards : <span> {movieInfo?.Awards} </span>\n              </span>\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className=\"spinner\">Loading...</div>\n      )}\n    </>\n  );\n};\n\nexport default MovieInfo;\n","import React, { useState } from \"react\";\nimport MovieSvg from \"../Icons/MovieSvg.svg\";\nimport SearchIcon from \"../Icons/SearchIcon.svg\";\nimport axios from \"axios\";\nimport \"./Navbar.css\";\nimport MovieCard from \"../MovieCard/MovieCard\";\nimport styled from \"styled-components\";\nimport MovieInfo from \"../MovieInfo/MovieInfo\";\nconst Navbar = () => {\n  const [search, updatesearch] = useState();\n  const [timeoutId, updatetimeoutId] = useState();\n  const [movieList, updatemovieList] = useState();\n  const [movieSelect, updatemovieSelect] = useState();\n  const fetchData = async (searchString) => {\n    const response = await axios.get(\n      `http://www.omdbapi.com/?s=${searchString}&apikey=a5487446`\n    );\n    updatemovieList(response.data.Search);\n    console.log(response);\n  };\n  const onTextchange = (e) => {\n    clearTimeout(timeoutId);\n    updatesearch(e.target.value);\n    const timeout = setTimeout(() => {\n      fetchData(e.target.value);\n    }, 500);\n    updatetimeoutId(timeout);\n  };\n  const MovieContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 2px;\n    padding: 30px;\n    justify-content: space-evenly;\n  `;\n\n  return (\n    <>\n      <div className=\"navbar\">\n        <div className=\"logo\">\n          <img src={MovieSvg} alt=\"Movie\" />\n          <span> React Movie App</span>\n        </div>\n        <div className=\"search\">\n          <img src={SearchIcon} alt=\"search\" />\n          <input\n            placeholder=\"serach movie here\"\n            value={search}\n            onChange={onTextchange}\n            type=\"text\"\n          />\n        </div>\n      </div>\n      {movieSelect && (\n        <MovieInfo\n          movieSelect={movieSelect}\n          updatemovieSelect={updatemovieSelect}\n        />\n      )}\n      <MovieContainer>\n        {movieList?.length ? (\n          movieList.map((movie, index) => {\n            return (\n              <MovieCard\n                movie={movie}\n                key={index}\n                updatemovieSelect={updatemovieSelect}\n              />\n            );\n          })\n        ) : (\n          <img id=\"notfound\" src={MovieSvg} alt=\"No movie found\" />\n        )}\n      </MovieContainer>\n    </>\n  );\n};\n\nexport default Navbar;\n","import Navbar from \"./components/Navbar/Navbar\";\nfunction App() {\n  return (\n    <>\n      <Navbar />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}